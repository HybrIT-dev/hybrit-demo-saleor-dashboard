name: $(Date:yyyyMMdd)-$(Rev:r)

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - readme.md

pr:
  branches:
    include:
      - master

resources:
  repositories:
    - repository: templates
      type: github
      name: HybrIT-dev/hybrit-azuredevops-templates
      ref: refs/heads/master
      endpoint: HybrIT-dev

variables:
  - group: nexus
  - name: artifactName
    value: viscon-saleor-dashboard

stages:
  # - stage: Codequality
  #   jobs:
  #     - job: Sonarqube
  #       steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               yarn
  #         - template: sonarqube.template.yml@templates
  #           parameters:
  #             serviceConnection: "HybrIT Sonarqube"
  #             buildReason: $(variables['Build.Reason'])
  #             targetBranch: $(System.PullRequest.TargetBranch)
  #             sourceBranch: $(System.PullRequest.SourceBranch)
  #             pullRequestNumber: "$(System.PullRequest.PullRequestNumber)"
  - stage: Build
    dependsOn: []
    jobs:
      - job: Docker
        displayName: Build docker
        steps:
          - checkout: self
            persistCredentials: true
          - template: gitsecret.template.yml@templates
            parameters:
              cicduser: $(nexus-email)
              secrets:
                - name: cicdprivatekey
                  secureFile: private-key.asc
                - name: cicdpublickey
                  secureFile: public-key.asc
          - task: GitVersion@5
            displayName: "Use GitVersion"
            inputs:
              runtime: "core"
              configFilePath: "$(build.sourcesdirectory)/GitVersion.yml"
              additionalArguments: "/output buildserver"
          - template: docker.template.yml@templates
            parameters:
              imageName: $(artifactName)
              imageVersion: $(GitVersion.SemVer)-test
              dockerFile: $(build.sourcesdirectory)/Dockerfile
              dockerRegistryEndpoint: "Docker - HybrIT - nexus"
              arguments: --build-arg API_URI=https://test.core.viscon.hybrit.io/graphql/
          - template: docker.template.yml@templates
            parameters:
              imageName: $(artifactName)
              imageVersion: $(GitVersion.SemVer)-prod
              dockerFile: $(build.sourcesdirectory)/Dockerfile
              dockerRegistryEndpoint: "Docker - HybrIT - nexus"
              arguments: --build-arg API_URI=https://core.viscon.hybrit.io/graphql/
          - template: helm.template.yml@templates
            parameters:
              chartName: $(artifactName)
              chartPath: "$(build.sourcesdirectory)/charts/$(artifactName)"
              chartVersion: $(GitVersion.SemVer)-test
              destination: "$(Build.ArtifactStagingDirectory)/charts"
              nexusUsername: $(nexus-username)
              nexusPassword: $(nexus-password)
              nexusHost: $(nexus-host-helm)
          - template: helm.template.yml@templates
            parameters:
              chartName: $(artifactName)
              chartPath: "$(build.sourcesdirectory)/charts/$(artifactName)"
              chartVersion: $(GitVersion.SemVer)-prod
              destination: "$(Build.ArtifactStagingDirectory)/charts"
              nexusUsername: $(nexus-username)
              nexusPassword: $(nexus-password)
              nexusHost: $(nexus-host-helm)
          - task: Bash@3
            displayName: artifact files
            inputs:
              targetType: "inline"
              script: |
                mkdir -p $(build.artifactstagingdirectory)/drop
                cp $(Build.ArtifactStagingDirectory)/charts/$(artifactName)-$(GitVersion.SemVer)-test.tgz $(build.artifactstagingdirectory)/drop/$(artifactName)-test.tgz
                cp $(Build.ArtifactStagingDirectory)/charts/$(artifactName)-$(GitVersion.SemVer)-prod.tgz $(build.artifactstagingdirectory)/drop/$(artifactName)-prod.tgz
                cp $(build.sourcesdirectory)/values.test.yaml $(build.artifactstagingdirectory)/drop/
                cp $(build.sourcesdirectory)/values.prod.yaml $(build.artifactstagingdirectory)/drop/
          - publish: $(Build.ArtifactStagingDirectory)/drop
            displayName: "publish artifact"
            artifact: output
  - stage: deploy_test
    displayName: Deploy to test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - deployment: deploy_test
        displayName: Deploy to test
        environment: "viscon-test.test"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: output
                - task: HelmInstaller@1
                  inputs:
                    helmVersionToInstall: "v3.1.0"
                - task: HelmDeploy@0
                  displayName: "Install or upgrade viscon-saleor-dashboard"
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: 'aks - viscon'
                    namespace: "test"
                    command: "upgrade"
                    chartType: "FilePath"
                    chartPath: "$(Pipeline.Workspace)/output/$(artifactName)-test.tgz"
                    releaseName: "$(artifactName)"
                    arguments: "-f $(Pipeline.Workspace)/output/values.test.yaml"
  - stage: deploy_prod
    displayName: Deploy to production
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - deployment: deploy_prod
        displayName: Deploy to production
        environment: "viscon-prod.prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: output
                - task: HelmInstaller@1
                  inputs:
                    helmVersionToInstall: "v3.1.0"
                - task: HelmDeploy@0
                  displayName: "Install or upgrade viscon-saleor-dashboard"
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: 'aks - viscon'
                    namespace: "prod"
                    command: "upgrade"
                    chartType: "FilePath"
                    chartPath: "$(Pipeline.Workspace)/output/$(artifactName)-prod.tgz"
                    releaseName: "$(artifactName)"
                    arguments: "-f $(Pipeline.Workspace)/output/values.prod.yaml"